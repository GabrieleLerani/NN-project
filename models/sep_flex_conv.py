import os
import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from models import CKNN


class SFCNN(nn.modules):
    def __init__(self, in_channels, out_channels, k_size):
        """
        Method to init the modified FlexConv layer, here is used the continuous kernel.
        Here a channel-wise convolution is computed with a kernel generated by
        a kernel generator network GKernel ∶R^D →R^N_in, followed by a point-wise convolution from N_in to N_out
        """
        self.GKernel = CKNN()
        self.pointwise_conv = nn.Conv2d(
            out_channels=out_channels, in_channels=in_channels, kernel_size=1
        )
        raise NotImplementedError("No implemented yet")

    def forward(self, x):
        """
        Standard method of nn.modules
        """

        # generating the kernel

        # channel-wise convolution

        # pointwise-convolution

        raise NotImplementedError("No implemented yet")
